// resources/js/app.tsx - ТОЧКА ВХОДА ДЛЯ КЛИЕНТСКОЙ ЧАСТИ ПРИЛОЖЕНИЯ - отвечает за инициализацию React-приложения и его монтирования в DOM...
import './bootstrap';                                       // это нам досталось "из коробки" Laravel
import { createInertiaApp } from '@inertiajs/react';        // клиентская часть — это функция из библиотеки @inertiajs/react, которая помогает создать Inertia-приложение. 
import { ReactElement } from 'react';
import { createRoot } from 'react-dom/client';              // это функция из react-dom/client, которая используется для создания корневого элемента, в который будет рендериться React-приложение. 
import { AllProviders } from './Providers';

// Что делает app.tsx?
const element = document.querySelector('#app');             // app.tsx ищет корневой элемент с id app, в который будет монтироваться React-приложение. Этот элемент находится в resources/views/app.blade.php
if(element) {
                                                            // app.tsx создаёт Inertia-приложение, которое принимает данные от Laravel и будет предавать их в React-компонент, а React рендерит их на стороне клиента (странице)
    createInertiaApp({                                      // функция, которая инициализирует Inertia-приложение...
        resolve: (name: string): Promise<ReactElement> => { // функция для динамического импорта компонентов...
            // Пробуем загрузить .tsx, если не получится — загружаем .jsx
            // console.log(`Загрузка компонента: ${name}.tsx`); // Отладка
            return import(`./Pages/${name}.tsx`)
            .then(module => {
                // console.log(`Компонент ${name} загружен:`, module.default); // Отладка
                return module.default;
            })
            .catch(() => import(`./Pages/${name}.jsx`))
            .catch((error) => {                             // Добавим обработку ошибок для динамического импорта: запасной компонент...
                // console.error(`Ошибка при загрузке компонента ${name}:`, error);
                return import('./Pages/NotFound');
            });       
        },
        setup({ el, App, props }) {                         // Монтирует React-приложение в корневой элемент (#app).
            //const root = createRoot(el);                  // el — это DOM-элемент, в который будет рендериться приложение (это элемент с id app в resources/views/app.blade.php).
            // root.render(<App {...props} />);             // рендерит корневой компонент App в созданный корневой элемент, передавая ему все свойства (props), которые были получены из серверной части
            createRoot(el).render(
                <AllProviders>
                    <App {...props} />
                </AllProviders>
            );
        },                                                  // App — это корневой компонент Inertia.js. Он автоматически создается библиотекой Inertia.js и оборачивает наш компонент (например, Home.tsx).
    });                                                     // Его (корневого компонента App) задача — управлять состоянием приложения, передавать пропсы (props) и обеспечивать навигацию между страницами. App отвечает за переходы между страницами без перезагрузки (SPA-поведение).
}

/* что здесь происходит:
    1) импорт библиотек
        - createInertiaApp — это функция из библиотеки @inertiajs/react, которая помогает создать Inertia-приложение. 
          Inertia — это библиотека, которая позволяет создавать одностраничные приложения (SPA) 
          с использованием серверного рендеринга (SSR) или клиентского рендеринга.
        
        - createRoot — это функция из react-dom/client, которая используется для создания корневого элемента, 
          в который будет рендериться React-приложение. 
          
    2) Создание Inertia-приложения. Параметры createInertiaApp:
        - resolve — это функция, которая определяет, как будут загружаться React-компоненты для каждой страницы. В данном случае:
            - name — это имя страницы, которое передается из серверной части (например, Home, About и т.д.).
            - import(\./Pages/${name}`) — это динамический импорт, который загружает компонент страницы из папки./Pages` на основе переданного имени.
            - .then(module => module.default) — после загрузки модуля, возвращается его экспорт по умолчанию (обычно это React-компонент).
        - setup — это функция, которая настраивает рендеринг приложения. Она принимает объект с тремя свойствами:
            - el — это DOM-элемент, в который будет рендериться приложение (обычно это элемент с id app в вашем HTML-файле).
            - App — это корневой React-компонент, который будет отрендерен.
            - props — это свойства, которые будут переданы в компонент App.

    Что происходит внутри setup: 
        1) Создание корневого элемента:
            - createRoot(el) создает корневой элемент для React-приложения, используя переданный DOM-элемент el.
        2) Рендеринг приложения:
            - root.render(<App {...props} />) рендерит корневой компонент App в созданный корневой элемент, передавая ему все свойства (props), которые были получены из серверной части.

    Где находится App?
        App — это виртуальный компонент, который создается Inertia.js "под капотом". Его явно нет в коде, но он существует в runtime (во время выполнения приложения).
        Как это работает? Когда мы вызываем createInertiaApp, Inertia.js создает компонент App автоматически. Этот компонент оборачивает 
        наш страничный компонент (например, Home.tsx) и передает ему данные...

        Inertia.js абстрагирует создание корневого компонента, чтобы упростить разработку. Не нужно вручную создавать App или управлять его логикой. 
        Вместо этого мы указываем, какой компонент должен быть отрендерен для каждой страницы (через resolve), а Inertia.js делает всё остальное...
*/