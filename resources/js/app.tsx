import './bootstrap';                                       // это нам досталось "из коробки" Laravel
import { createInertiaApp } from '@inertiajs/react';        // клиентская часть — это функция из библиотеки @inertiajs/react, которая помогает создать Inertia-приложение. 
import { ReactElement } from 'react';
import { createRoot } from 'react-dom/client';              // это функция из react-dom/client, которая используется для создания корневого элемента, в который будет рендериться React-приложение. 
import 'react-toastify/dist/ReactToastify.css';             // подключает стили для библиотеки react-toastify (уведомления).

const element = document.querySelector('#app');             // ищет элемент с id app, в который будет монтироваться React-приложение.
if(element) {
    // создается Inertia-приложение, которое принимает данные от Laravel и будет предавать их в React-компонент, а React рендерит их на стороне клиента (странице)
    createInertiaApp({                                      // функция, которая инициализирует Inertia-приложение...
        resolve: (name: string): Promise<ReactElement> => { // функция для динамического импорта компонентов...
            // Пробуем загрузить .tsx, если не получится — загружаем .jsx
            return import(`./Pages/${name}.tsx`).
            then(module => module.default)
            .catch(() => import(`./Pages/${name}.jsx`))
            .catch((error) => {                             // Добавим обработку ошибок для динамического импорта: запасной компонент...
                console.error(`Ошибка при загрузке компонента ${name}:`, error);
                return import('./Pages/NotFound');
            });       
        },
        setup({ el, App, props }) {
            const root = createRoot(el);
            root.render(<App {...props} />);                // рендерит корневой компонент App в созданный корневой элемент, передавая ему все свойства (props), которые были получены из серверной части
        },
    });
}

/* что здесь происходит:
    1) импорт библиотек
        - createInertiaApp — это функция из библиотеки @inertiajs/react, которая помогает создать Inertia-приложение. 
          Inertia — это библиотека, которая позволяет создавать одностраничные приложения (SPA) 
          с использованием серверного рендеринга (SSR) или клиентского рендеринга.
        
        - createRoot — это функция из react-dom/client, которая используется для создания корневого элемента, 
          в который будет рендериться React-приложение. 
          
    2) Создание Inertia-приложения. Параметры createInertiaApp:
        - resolve — это функция, которая определяет, как будут загружаться React-компоненты для каждой страницы. В данном случае:
            - name — это имя страницы, которое передается из серверной части (например, Home, About и т.д.).
            - import(\./Pages/${name}`) — это динамический импорт, который загружает компонент страницы из папки./Pages` на основе переданного имени.
            - .then(module => module.default) — после загрузки модуля, возвращается его экспорт по умолчанию (обычно это React-компонент).
        - setup — это функция, которая настраивает рендеринг приложения. Она принимает объект с тремя свойствами:
            - el — это DOM-элемент, в который будет рендериться приложение (обычно это элемент с id app в вашем HTML-файле).
            - App — это корневой React-компонент, который будет отрендерен.
            - props — это свойства, которые будут переданы в компонент App.

    Что происходит внутри setup: 
        1) Создание корневого элемента:
            - createRoot(el) создает корневой элемент для React-приложения, используя переданный DOM-элемент el.
        2) Рендеринг приложения:
            - root.render(<App {...props} />) рендерит корневой компонент App в созданный корневой элемент, передавая ему все свойства (props), которые были получены из серверной части.
*/