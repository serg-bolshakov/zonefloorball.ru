// resources/js/Pages/AdminOrdersListPage.tsx
import React, { useState, useEffect } from 'react';
import { Inertia } from '@inertiajs/inertia';
import { router } from '@inertiajs/react';
import { AdminLayout } from '@/Layouts/AdminLayout';
import { Helmet } from 'react-helmet';
import { OrdersTable } from '@/Components/Admin/Sections/Orders/OrdersTable/OrdersTable';
import { IOrdersResponse, IOrder, EnumOrderStatus, OrderStatusLabels } from '@/Types/orders';
import { toast } from 'react-toastify';
import { toStringOrNull } from '@/Utils/toStringOrNull';
import { toNumberOrNull } from '@/Utils/toNumberOrNull';
import axios from "axios";

/** –Ω–∞ –≤—Ö–æ–¥–µ
 *  return Inertia::render('AdminOrdersListPage', [
            'title'         => '–ê–¥–º–∏–Ω–∫–∞. –ó–∞–∫–∞–∑—ã',
            'robots'        => 'NOINDEX,NOFOLLOW',
            'description'   => '',
            'keywords'      => '',
            'orders'        => $orders,
            'filters' => [
                'search'     => $searchTerm,        // 
                'searchType' => $searchType,        // 'order_number' // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–∏—Å–∫ –ø–æ –Ω–æ–º–µ—Ä—É –∑–∞–∫–∞–∑–∞
                'status'     => $statusFilter,      // 'all'
                'sortBy'     => $sortBy,            // 'created_at'
                'sortOrder'  => $sortOrder,         // 'desc'
                'perPage'    => $perPage,           // 25
                'dateFrom'   => $dateFrom,          // –≤—Å–µ–≥–¥–∞ string (–ø—É—Å—Ç–∞—è –∏–ª–∏ —Å –¥–∞—Ç–æ–π)
                'dateTo'     => $dateTo,            // –≤—Å–µ–≥–¥–∞ string
            ]
        ]);
*/

export interface IOrdersFiltersSet {
    search: string;                    // –≤—Å–µ–≥–¥–∞ string (–ø—É—Å—Ç–∞—è –∏–ª–∏ —Å —Ç–µ–∫—Å—Ç–æ–º)
    searchType: 'order_number' | 'recipient' | 'email' | 'user_name';
    status: EnumOrderStatus | 'all';
    sortBy: string;                    // –≤—Å–µ–≥–¥–∞ string (–∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –µ—Å—Ç—å)
    sortOrder: 'asc' | 'desc';         // –≤—Å–µ–≥–¥–∞ –æ–¥–Ω–æ –∏–∑ –¥–≤—É—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    perPage: number;                   // –≤—Å–µ–≥–¥–∞ number (–∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –µ—Å—Ç—å)
    dateFrom: string;                  // –≤—Å–µ–≥–¥–∞ string (–ø—É—Å—Ç–∞—è –∏–ª–∏ —Å –¥–∞—Ç–æ–π)
    dateTo: string;                    // –≤—Å–µ–≥–¥–∞ string (–ø—É—Å—Ç–∞—è –∏–ª–∏ —Å –¥–∞—Ç–æ–π)
}

interface AdminStockUpdateManualPageProps {
    title: string;
    robots: string;
    description: string;
    keywords: string;
    orders: IOrdersResponse; // –æ–±—ä–µ–∫—Ç —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    filters: IOrdersFiltersSet;
}

const handleRowClick = (orderId: number) => {
    // Inertia.post(`/admin/orders/${orderId}`);
};

const defaultOrders: IOrdersResponse = {
    current_page: 1,
    from: 1,
    last_page: 1,
    path: '',
    per_page: 6,
    to: 1,
    total: 0,
    links: [{
        url: null, 
        label: '', 
        active: false
    }],
    
    data: [],
   
    first_page_url: null,
    last_page_url: null,
    prev_page_url: null,
    next_page_url: null,        
};

const AdminStockUpdateManualPage: React.FC<AdminStockUpdateManualPageProps> = ({ 
    title, 
    robots, 
    description, 
    keywords, 
    orders = defaultOrders, // –≠—Ç–æ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞ (–ø–æ—Å–ª–µ –ø–æ–∏—Å–∫–∞, –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∏ —Ç.–¥.)
    filters,
}) => {
    // console.log('orders.data', orders.data);
    // console.log('filters', filters);

    // –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏:
    const [isLoading, setIsLoading] = useState(false);
    useEffect(() => {
    const unsubscribe = Inertia.on('start', () => setIsLoading(true));
    const unsubscribeFinish = Inertia.on('finish', () => setIsLoading(false));
    
    return () => {
            unsubscribe();
            unsubscribeFinish();
        };
    }, []);

    // –õ–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤
    const [editableOrders, setEditableOrders]   = useState(orders.data);

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    const updateOrderStatus = (orderId: number, newStatus: EnumOrderStatus) => {
        setEditableOrders(prev => 
            prev.map(order => 
                order.id === orderId 
                    ? { ...order, status_id: newStatus }
                    : order
            )
        );
    };

    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ orders —Å —Å–µ—Ä–≤–µ—Ä–∞ - –æ–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    useEffect(() => {
        setEditableOrders(orders.data);
    }, [orders.data]); // –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç orders.data

    const handleStatusChange = (orderId: number, newStatus: EnumOrderStatus, comment: string) => {
        // 1. –û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI
        updateOrderStatus(orderId, newStatus);
        
        // 2. –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        Inertia.post(`/admin/orders/${orderId}/status`, {
            status: newStatus,
            comment: comment,
        }, {
            onError: () => {
                // 3. –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ - –æ—Ç–∫–∞—Ç –æ–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                setEditableOrders(orders.data); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞');
            },
            onSuccess: () => {
                alert('–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª—ë–Ω');
            },
            preserveScroll: true,
            preserveState : false // –ü–æ–∑–≤–æ–ª—è–µ–º Inertia –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
        });
    };

    const handleTrackNumberUpdate = async (orderId: number, trackNumber: string, comment: string) => {
        
        // 1. –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if (!orderId || !trackNumber?.trim()) {
            console.error('‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', { orderId, trackNumber });
            toast.error('–¢—Ä–µ–∫-–Ω–æ–º–µ—Ä –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º');
            return;
        }

        const cleanTrackNumber = trackNumber.trim();

        
        // 2. –ù–∞—Ö–æ–¥–∏–º –∑–∞–∫–∞–∑ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π
        const currentOrder = orders.data.find(o => o.id === orderId);
        if (!currentOrder) { 
            console.error('‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ', orderId);
            toast.error('–û—à–∏–±–∫–∞: –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }

        console.log('üîç –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–∫–∞:', {
            orderId,
            orderNumber: currentOrder.order_number,
            trackNumber: cleanTrackNumber,
            commentLength: comment.length
        });

        // 3. –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–∫–∞—Ç–∞
        const originalTrackNumber = currentOrder.order_track_num;

        // 4. –û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI
        setEditableOrders(prev => 
            prev.map(order => 
                order.id === orderId 
                    ? { ...order, order_track_num: cleanTrackNumber, }
                    : order
            )
        );

        // 5. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        try {
            const response = await axios.post(`/admin/orders/${orderId}/update-order-track`, {
                orderId,
                track_number: cleanTrackNumber,
                comment: comment
            });

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º HTTP —Å—Ç–∞—Ç—É—Å
            if (response.status >= 200 && response.status < 300) {
                toast.success('–¢—Ä–µ–∫-–Ω–æ–º–µ—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω');
            } else {
                throw new Error(`HTTP error! status: ${response.status}`);
            }

        } catch (error) {
            console.error('‚ùå Request error:', error);

            // 6. –û—Ç–∫–∞—Ç –æ–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            setEditableOrders(prev => 
                prev.map(order => 
                    order.id === orderId 
                        ? { ...order, order_track_num: originalTrackNumber }
                        : order
                )
            );

            
            let errorMessage = '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–∞ –∑–∞–∫–∞–∑–∞';
            
            if (axios.isAxiosError(error)) {
                const status = error.response?.status;
                
                if (status === 422) errorMessage = '‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö';
                else if (status === 404) errorMessage = '‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω';
                else if (status && status >= 500) errorMessage = 'üö® –°–µ—Ä–≤–µ—Ä–Ω–∞—è –æ—à–∏–±–∫–∞';
                else if (status && status >= 400) errorMessage = '‚ùå –û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö';
                else errorMessage = '‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏';
            }
            
            toast.error(errorMessage);
        }
        
    }

    return (
        <AdminLayout>
            <Helmet>
                <title>{title}</title>
                <meta name="description" content={description} />
                <meta name="keywords" content={keywords} />
                <meta name="robots" content={robots} />
            </Helmet>

            {/* –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã */}
            <div className="admin-content">
                <h1 className="h1-tablename">–ó–∞–∫–∞–∑—ã</h1>
                {/* –ü–µ—Ä–µ–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–∫–∞–∑–∞—Ö –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Ç–∞–±–ª–∏—Ü—ã */}
                <OrdersTable 
                    orders={{ ...orders, data: editableOrders }} // –ü–µ—Ä–µ–¥–∞–µ–º –æ–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                    // orders={orders}
                    filters={filters}
                    onStatusChange={handleStatusChange}
                    onTrackNumberUpdate={handleTrackNumberUpdate}
                    onRowClick={handleRowClick}
                />
            </div>                
        </AdminLayout>    
    );
};

export default AdminStockUpdateManualPage;