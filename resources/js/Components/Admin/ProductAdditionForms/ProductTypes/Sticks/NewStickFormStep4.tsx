// resources/js/Components/Admin/ProductAdditionForms/ProductTypes/Sticks/NewStickFormStep4.tsx

import React, { useState, useCallback, useRef } from "react";
import { IImage, IImageUploadData } from "@/Types/image";
import { IProduct } from "@/Types/types";

// –¢–∏–ø—ã –¥–ª—è –Ω–µ–≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ñ–æ—Ä–º—ã (–≤—Å–µ –ø–æ–ª—è optional)
export type TNewStickFormStep4 = {
    /* –ø–æ–ª—è —à–∞–≥–∞ 4 */ 
};

// –¢–∏–ø—ã –¥–ª—è –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º ... —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ –ø–æ–ª–µ–π
export type TValidatedNewStickStep4 = {
  /* –≤—Å–µ –ø–æ–ª—è —à–∞–≥–∞ 4 */ 
};

interface Step4FormProps {
    errors: Record<string, string>;
    productId: number;
    similarProduct?: IProduct;
    onComplete: (images: IImage[]) => void;
    onCancel: () => void;
    isLoading: boolean;
    onUpload: (files: File[], mainIndex: number, showcaseIndex: number, promoIndices: number[], orientations: Record<number, number>) => void;
}

const NewStickFormStep4: React.FC<Step4FormProps> = ({
    errors,
    productId,
    similarProduct,
    onComplete,
    onCancel,
    isLoading,
    onUpload
}) => {
    const [uploadedFiles, setUploadedFiles] = useState<File[]>([]);
    const fileInputRef = useRef<HTMLInputElement>(null);
    const [mainImageIndex, setMainImageIndex] = useState<number>(-1);
    const [showcaseImageIndex, setShowcaseImageIndex] = useState<number>(-1);       // –¢–æ–ª—å–∫–æ –æ–¥–∏–Ω –¥–ª—è –≤–∏—Ç—Ä–∏–Ω—ã
    const [promoImages, setPromoImages] = useState<number[]>([]);
    const [orientations, setOrientations] = useState<Record<number, number>>({});

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–æ–≤ —á–µ—Ä–µ–∑ input
    const handleFileSelect = (event: React.ChangeEvent<HTMLInputElement>) => {
        const files = event.target.files;                                           // –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª—ã –∏–∑ input
        if (files && files.length > 0) {
            const newFiles = Array.from(files);
            setUploadedFiles(prev => [...prev, ...newFiles]);                       // –î–æ–±–∞–≤–ª—è–µ–º –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º
        }
    };

    // —Ä–∞–∑—Ä–µ—à–∞–µ–º drop
    const handleDragOver = (event: React.DragEvent<HTMLDivElement>) => {
        event.preventDefault();     // –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ! –ë—Ä–∞—É–∑–µ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∑–∞–ø—Ä–µ—â–∞–µ—Ç drop
        event.stopPropagation();    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–ø–ª—ã—Ç–∏–µ —Å–æ–±—ã—Ç–∏—è
    };

    // –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—É—Å–∫–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤
    const handleDrop = (event: React.DragEvent<HTMLDivElement>) => {
        event.preventDefault();
        event.stopPropagation();
        
        const files = event.dataTransfer.files;                                     // –§–∞–π–ª—ã –∏–∑ —Å–æ–±—ã—Ç–∏—è drag and drop
        if (files && files.length > 0) {
            const newFiles = Array.from(files);
            setUploadedFiles(prev => [...prev, ...newFiles]);
        }
    };

    // –∫–ª–∏–∫ –ø–æ –∑–æ–Ω–µ = –∫–ª–∏–∫ –ø–æ input
    const handleClickArea = () => {
        fileInputRef.current?.click();                                              // –ü—Ä–æ–≥—Ä–∞–º–º–Ω–æ –∫–ª–∏–∫–∞–µ–º –ø–æ —Å–∫—Ä—ã—Ç–æ–º—É input
    };

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏
    const handleUpload = () => {
        if (uploadedFiles.length === 0) return;
        
        onUpload(
            uploadedFiles,
            mainImageIndex,
            showcaseImageIndex,
            promoImages,
            orientations
        );
    };

    // –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –∏–∑ —Å–ø–∏—Å–∫–∞
    const removeFile = (index: number) => {
        setUploadedFiles(prev => prev.filter((_, i) => i !== index));
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º selections –µ—Å–ª–∏ —É–¥–∞–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        if (mainImageIndex === index) setMainImageIndex(-1);
        if (showcaseImageIndex === index) setShowcaseImageIndex(-1);
        setPromoImages(prev => prev.filter(i => i !== index));
        
        const newOrientations = { ...orientations };
        delete newOrientations[index];
        setOrientations(newOrientations);
    };

    return (
        <div className="productAddition">
            <div className="productAddition-form__input-item">
                <div className="productAddition-form__title">
                    <p>–≤—ã–±–µ—Ä–µ–º –∏ –∑–∞–≥—Ä—É–∑–∏–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞, —á—Ç–æ–±—ã –∫–ª–∏–µ–Ω—Ç –ø–æ–ª—É—á–∏–ª –∏—Å—á–µ—Ä–ø—ã–≤–∞—é—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é...</p>
                </div>
            </div>
            
            {/* –ó–æ–Ω–∞ drag and drop */}
            <div 
                className="dropzone"
                onDragOver={handleDragOver}
                onDrop={handleDrop}
                onClick={handleClickArea}
                style={{
                    border: '2px dashed #ccc',
                    padding: '40px',
                    textAlign: 'center',
                    cursor: 'pointer',
                    borderRadius: '8px',
                    margin: '20px 0'
                }}
            >
                <input
                    ref={fileInputRef}
                    type="file"
                    multiple
                    accept="image/*"
                    onChange={handleFileSelect}
                    style={{ display: 'none' }}
                />
                <p>üìÅ –ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—é–¥–∞</p>
                <p>–∏–ª–∏</p>
                <p>üñ±Ô∏è –ö–ª–∏–∫–Ω–∏—Ç–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–æ–≤</p>
            </div>

            {/* –°–ø–∏—Å–æ–∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ */}
            {uploadedFiles.length > 0 && (
                <div className="uploaded-files">
                    <h4 className="margin-tb12px color-red">–§–∞–π–ª—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è  ({uploadedFiles.length}):</h4>
                    {uploadedFiles.map((file, index) => (
                        <div key={index} className="file-item" style={{
                        border: '1px solid #ddd',
                        padding: '10px',
                        margin: '10px 0',
                        borderRadius: '4px'
                        }}>
                            
                            <div style={{ display: 'flex', alignItems: 'center', gap: '15px' }}>
                                <img 
                                    src={URL.createObjectURL(file)} 
                                    alt={file.name} 
                                    width="60" 
                                    height="60"
                                    style={{ objectFit: 'cover' }}
                                />
                                
                                <div style={{ flex: 1 }}>
                                    <p style={{ margin: 0, fontWeight: 'bold' }}>{file.name}</p>
                                    <p style={{ margin: 0, color: '#666' }}>
                                        {(file.size / 1024).toFixed(1)} KB
                                    </p>
                                </div>

                                <button 
                                    onClick={(e) => {
                                        e.stopPropagation();
                                        removeFile(index);
                                    }}
                                    style={{ 
                                        background: '#ff4757', 
                                        color: 'white', 
                                        border: 'none', 
                                        padding: '5px 10px',
                                        borderRadius: '4px',
                                        cursor: 'pointer'
                                    }}
                                >
                                    √ó
                                </button>
                            </div>

                            <div style={{ marginTop: '10px', display: 'flex', flexWrap: 'wrap', gap: '15px' }}>
                                {/* –ì–ª–∞–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ - radio button */}
                                <label>
                                    <input
                                        type="radio"
                                        name="mainImage"
                                        checked={mainImageIndex === index}
                                        onChange={() => setMainImageIndex(index)}
                                    />
                                    –ì–ª–∞–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                                </label>

                                {/* –î–ª—è –≤–∏—Ç—Ä–∏–Ω—ã - radio button (—Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω) */}
                                <label>
                                    <input
                                        type="radio"
                                        name="showcaseImage"
                                        checked={showcaseImageIndex === index}
                                        onChange={() => setShowcaseImageIndex(index)}
                                    />
                                    –î–ª—è –≤–∏—Ç—Ä–∏–Ω—ã
                                </label>

                                {/* –ü—Ä–æ–º–æ-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è - checkbox (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ) */}
                                <label>
                                    <input
                                        type="checkbox"
                                        checked={promoImages.includes(index)}
                                        onChange={() => setPromoImages(prev => 
                                        prev.includes(index) 
                                            ? prev.filter(i => i !== index)
                                            : [...prev, index]
                                        )}
                                    />
                                    –ü—Ä–æ–º–æ-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                                </label>

                                <select
                                    value={orientations[index] || ''}
                                    onChange={(e) => setOrientations(prev => ({
                                        ...prev,
                                        [index]: parseInt(e.target.value)
                                    }))}
                                    style={{ padding: '5px', borderRadius: '4px' }}
                                >
                                    <option value="">–û—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è</option>
                                    <option value="1">–ü–æ—Ä—Ç—Ä–µ—Ç–Ω–∞—è</option>
                                    <option value="2">–ê–ª—å–±–æ–º–Ω–∞—è</option>
                                    <option value="3">–ö–≤–∞–¥—Ä–∞—Ç–Ω–∞—è</option>
                                    <option value="4">–ü—Ä–æ–º–æ</option>
                                </select>
                            </div>
                        </div>
                    ))}
                </div>
            )}

            {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */}
            <div className="form-actions margin-top24px">
                <button 
                    onClick={handleUpload} 
                    disabled={isLoading || uploadedFiles.length === 0}
                    className="productAddition-form__submit-btn"
                >
                    {isLoading ? '–ó–∞–≥—Ä—É–∑–∫–∞...' : '–ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è'}
                </button>
                <button 
                    onClick={onCancel} 
                    className="productAddition-form__submit-btn margin-left12px"
                >
                –û—Ç–º–µ–Ω–∞
                </button>
            </div>
        </div>
    );

};

export default NewStickFormStep4;