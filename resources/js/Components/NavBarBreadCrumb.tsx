// resources/js/Components/NavBarBreadCrumb.tsx

import { Link, usePage } from '@inertiajs/react';
import useAppContext from '../Hooks/useAppContext';
import React, { useState, useEffect } from 'react';

// –î–æ–±–∞–≤–ª—è–µ–º —Ö—É–∫ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
// const [isMobile, setIsMobile] = useState(false);

// useEffect(() => {
//   const checkMobile = () => {
//     setIsMobile(window.innerWidth <= 768);
//   };
  
//   checkMobile();
//   window.addEventListener('resize', checkMobile);
  
//   return () => window.removeEventListener('resize', checkMobile);
// }, []);


// React.FC ‚Äî —ç—Ç–æ —Ç–∏–ø, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º—ã–π React. –û–Ω —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ—Ç—Å—è –∫–∞–∫ React Function Component (—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç React).
// –≠—Ç–æ —Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ –¥–ª—è React.FunctionComponent. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ç–∏–ø–∏–∑–∏—Ä—É–µ—Ç children –∫–∞–∫ ReactNode. –£–ø—Ä–æ—â–∞–µ—Ç —Ç–∏–ø–∏–∑–∞—Ü–∏—é –ø—Ä–æ–ø—Å–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.
const NavBarBreadCrumb: React.FC = () => {

    const { categoriesMenuArr } = useAppContext();
    const { url } = usePage();
    
    const { categoriesInfo } = useAppContext();

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ –º–µ–Ω—é
    const [isOpen, setIsOpen] = useState(false);

    // const currentPath = url.split('?')[0]; // –û—Ç–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É –∑–∞–ø—Ä–æ—Å–∞ - –º–µ—Ç–æ–¥ split –ø–æ–∑–≤–æ–ª—è–µ—Ç —Ä–∞–∑–¥–µ–ª–∏—Ç—å —Å—Ç—Ä–æ–∫—É –ø–æ —Å–∏–º–≤–æ–ª—É ? –∏ –≤–∑—è—Ç—å —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—É—é —á–∞—Å—Ç—å (–ø—É—Ç—å)
    const currentPath = new URL(url, window.location.origin).pathname; // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –ø—É—Ç—å - –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π URL API
    
    // —ç—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –¥–ª—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–¥–º–µ–Ω—é –ö–∞—Ç–∞–ª–æ–≥–∞:
    const searchParams = new URL(url, window.location.origin).searchParams;
    
    // –ü–æ–ª—É—á–∞–µ–º GET-–ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    const categoryParam = searchParams.get('category');
    const brandParam    = searchParams.get('brand');
    const serieParam    = searchParams.get('serie');
    const modelParam    = searchParams.get('model');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è
    const hasFilter = categoryParam && (serieParam || brandParam || modelParam);


    // –ï—Å–ª–∏ categoriesMenuArr –µ—â—ë –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
    if (!categoriesMenuArr) {
        return <div>–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...</div>;
    }
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ–±—ä–µ–∫—Ç –≤ –º–∞—Å—Å–∏–≤
    const categories = Object.values(categoriesMenuArr.UnihocZoneRussia);

    // –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ —è–≤–ª—è—é—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º
    if (!Array.isArray(categories)) {
        return <div>–î–∞–Ω–Ω—ã–µ unihocZoneRussiaArray –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–ª–∏ –∏–º–µ—é—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.</div>;
    }

    const breadcrumbItems = [
        { label: '–ì–ª–∞–≤–Ω–∞—è', href: '/' },
        { label: '–ö–∞—Ç–∞–ª–æ–≥', href: '/products/catalog' },
        ...categories.map(category => ({
            label: category[0]?.category_view_2,
            href: `/products/${category[0]?.url_semantic}`,
        })),
    ];

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è –¢–ï–ö–£–©–ï–ô –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const getCurrentCategoryLabel =  (currentPath: string | null) => {
        if (!currentPath || !categoriesInfo) return '–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤';

        if (currentPath === '/') {
            return '–í—ã–±—Ä–∞—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é';
        }
        
        if (currentPath === '/products/catalog') {
            return '–ö–∞—Ç–∞–ª–æ–≥ (–≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤)';
        }

        // –ò—â–µ–º –≤ breadcrumbItems —Ç–µ–∫—É—â–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
        const activeItem = breadcrumbItems.find(item => 
            item.href && currentPath.endsWith(item.href)
        );
        // return activeItem?.label || '–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤';
        return activeItem?.label ? `–≤—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: ${activeItem.label}` : '–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤';
    };

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const getCategoryLabel = (category: string | null) => {
        if (!category || !categoriesInfo) return '';
        /*
            // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –º–∞–ø–ø–∏–Ω–≥ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –Ω–∞–∑–≤–∞–Ω–∏–π –Ω–∞ —á–∏—Ç–∞–µ–º—ã–µ, –∞ –º–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∂–∞—Ç—å –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç: –Ω–∞–¥–æ –±—É–¥–µ—Ç –∑–∞–≤—Ç—Ä–∞ —É—Ç—Ä–æ–º "–¥–æ–ø–∏–ª–∏—Ç—å" api-–∑–∞–ø—Ä–æ—Å...
            const categoryMap: Record<string, string> = {
                'sticks': '–ö–ª—é—à–∫–∏',
                'blades': '–ö—Ä—é–∫–∏',
            };
            // –ï—Å–ª–∏ category –µ—Å—Ç—å –≤ –º–∞–ø–ø–∏–Ω–≥–µ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —á–∏—Ç–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ, –∏–Ω–∞—á–µ ‚Äî –∏—Å—Ö–æ–¥–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            return categoryMap[category] || category;
        */

        const foundCategory = Object.values(categoriesInfo)
            .flat()                                             // –ú–µ—Ç–æ–¥ flat —É–º–µ–Ω—å—à–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏ –º–Ω–æ–≥–æ–º–µ—Ä–Ω–æ–≥–æ –º–∞—Å—Å–∏–≤–∞. –ú–æ–∂–µ—Ç –ª–∏–±–æ –¥–µ–ª–∞—Ç—å –º–∞—Å—Å–∏–≤ –æ–¥–Ω–æ–º–µ—Ä–Ω—ã–º, –ª–∏–±–æ —É–º–µ–Ω—å—à–∞—Ç—å –º–µ—Ä–Ω–æ—Å—Ç—å –Ω–∞ –∑–∞–¥–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. https://code.mu/ru/javascript/manual/array/flat/
            .find(item => item.url_semantic === category);      // –ú–µ—Ç–æ–¥ find –ø–æ–º–æ–≥–∞–µ—Ç –Ω–∞–π—Ç–∏ –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –≤ –º–∞—Å—Å–∏–≤–µ —Å–æ–≥–ª–∞—Å–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–º—É –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–µ –∫–æ–ª–ª–±—ç–∫—É. –ï—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç–∞ –Ω–µ—Ç, —Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è undefined. https://code.mu/ru/javascript/manual/array/find/

        return foundCategory?.category_view_2 || category;

    };

    // –°–æ–∑–¥–∞–µ–º –º–æ–±–∏–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é return
    /*if (isMobile) {
        return (
            <div className="mobile-categories-container">
                <button 
                    className="mobile-categories-button"
                    onClick={() => setIsOpen(!isOpen)}
                >
                    <span>üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤</span>
                    <span>{isOpen ? '‚ñ≤' : '‚ñº'}</span>
                </button>
        
                {isOpen && (
                    <div className="categories-dropdown">
                    {breadcrumbItems.map((item, index) => (
                        item.label && (
                        <Link 
                            key={item.href}
                            href={item.href}
                            className={`category-link ${currentPath === item.href ? 'active-category' : ''}`}
                            onClick={() => setIsOpen(false)}
                            preserveScroll
                            preserveState
                        >
                            {item.label}
                        </Link>
                        )
                    ))}
                    </div>
                )}
            </div>
        );
    }*/

    console.log('category_choosed', categoriesInfo);
    console.log('current_path', currentPath);
        
    return (
        <>
            {/* –î–µ—Å–∫—Ç–æ–ø–Ω–∞—è –≤–µ—Ä—Å–∏—è */}
            <nav className="breadcrumb-desktop">
                <div className="nav-bar">
                    <ul className="breadcrumb">
                        {
                            breadcrumbItems.map((item, index) => (
                                item.label && (
                                    <li key={item.href}>
                                        <Link href={item.href}
                                            className={currentPath === item.href ? 'activeBreadcrumb' : ''}
                                            preserveScroll // –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ–∑–∏—Ü–∏—é —Å–∫—Ä–æ–ª–ª–∞
                                            preserveState // –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
                                        >
                                            {item.label}
                                        </Link>
                                        {index !== breadcrumbItems.length - 1 && <span className="nav-bar__ul-li"></span>}
                                    </li>
                                )
                            ))
                        }
                    </ul>
                </div>

                {/* –ë–ª–æ–∫ –ø–æ–¥–Ω–∞–≤–∏–≥–∞—Ü–∏–∏ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ */}
                {hasFilter && (
                    <div className="subnav d-flex">
                        <div className="subnav-elem d-flex">–ö–∞—Ç–∞–ª–æ–≥</div>
                        
                        <div className="subnav-arrow">
                            <span></span>
                            <span></span>
                            <span></span>
                        </div>
                        
                        <div className="subnav-elem d-flex">
                            {getCategoryLabel(categoryParam)}
                            {brandParam && `: ${brandParam.toUpperCase()}`}
                        </div>
                        
                        {(serieParam || modelParam) && (
                            <>
                                <div className="subnav-arrow">
                                    <span></span>
                                    <span></span>
                                    <span></span>
                                </div>
                                
                                <div className="subnav-elem d-flex">
                                    {serieParam ? `–°–µ—Ä–∏—è: ${serieParam.toUpperCase()}` : ''}
                                    {modelParam ? `–ú–æ–¥–µ–ª—å: ${modelParam.toUpperCase()}` : ''}
                                </div>
                            </>
                        )}
                    </div>
                )}
            </nav>

            {/* –ú–æ–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è */}
            <div className="breadcrumb-mobile">
            {/* –≤—ã–ø–∞–¥–∞—é—â–µ–µ –º–µ–Ω—é –∫–∞—Ç–µ–≥–æ—Ä–∏–π */}
                <div className="mobile-categories-container">
                    <button 
                        className="mobile-categories-button"
                        onClick={() => setIsOpen(!isOpen)}
                    >
                        {/* <span>üìÅ&nbsp;&nbsp;&nbsp;{`–≤—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: ${getCurrentCategoryLabel(currentPath)}`}</span> */}
                        <span>üìÅ&nbsp;&nbsp;&nbsp;{getCurrentCategoryLabel(currentPath)}</span>
                        <span>{isOpen ? '‚ñ≤' : '‚ñº'}</span>
                    </button>
            
                    {isOpen && (
                        <div className="categories-dropdown">
                        {breadcrumbItems.map((item, index) => (
                            item.label && (
                            <Link 
                                key={item.href}
                                href={item.href}
                                className={`category-link ${currentPath === item.href ? 'active-category' : ''}`}
                                onClick={() => setIsOpen(false)}
                                preserveScroll
                                preserveState
                            >
                                {item.label}
                            </Link>
                            )
                        ))}
                        </div>
                    )}
                </div>
            </div>
        </>

        
    );

    /* –≤—ã—à–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞–ª —É–ø—Ä–æ—Å—Ç–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω–Ω—ã—Ö: —Å–æ–±—Ä–∞–ª –≤—Å–µ "–∫—Ä–æ—à–∫–∏" –≤ –æ–¥–∏–Ω –º–∞—Å—Å–∏–≤... –∞ –±—ã–ª–æ —Ç–∞–∫:

    return (
        <>
        <nav className="nav-bar">
            <ul className="breadcrumb">
                <li key='key_main_breadcrumb'><Link href="/">–ì–ª–∞–≤–Ω–∞—è</Link><span className="nav-bar__ul-li"></span></li>
                <li key='key_catalog_breadcrumb'><Link href="/products/catalog">–ö–∞—Ç–∞–ª–æ–≥</Link><span className="nav-bar__ul-li"></span></li>
                {unihocZoneRussiaArray.map((category) => {
                    if (category[0]) {
                    return (
                        <li key={category[0].url_semantic}><Link href={`/products/${category[0].url_semantic}`}>
                            {category[0].category_view_2}
                        </Link><span className="nav-bar__ul-li"></span></li>
                    );      
                    }  
                    return null; // –ï—Å–ª–∏ category[0] –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º null      
                })}
            </ul>
        </nav>
        </>
    );

    */
};

export default NavBarBreadCrumb;