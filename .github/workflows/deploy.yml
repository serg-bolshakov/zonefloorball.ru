name: Deploy to VPS
# предыдущий процесс деплоя предполагал использование Git на VPS (git fetch, git reset). После "радикального" обновления VPS с помощью FileZilla
# мы удалили папку .git - теперь эти команды работать не будут... Сейчас для копирования файлов с GitHub будем использовать утилиту rsync, которая должна подойти нам для синхронизации файлов между локальной машиной и удалённым сервером.

# Деплой запускается при пуше в ветку main
# Set up SSH: Настраивает SSH-агент для подключения к серверу.

# Deploy to server: Подключается к серверу по SSH и выполняет команды:
    # Переходит в директорию проекта.
    # Обновляет код из репозитория.
    # Устанавливает зависимости через Composer.
    # Запускает миграции (если нужно).

on:
  push:
    branches:
      - main  # Укажем ветку, в которую хотим деплоить 

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code                                 # Клонирует репозиторий на runner GitHub Actions
        uses: actions/checkout@v4

      - name: Install Node.js                               # Устанавливает Node.js (нужен для выполнения rsync и других команд).
        uses: actions/setup-node@v4
        with:
            node-version: '18.14.0'  

      - name: Deploy to VPS using rsync                     # Копирует файлы на VPS и выполняет сборку
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}   # Приватный SSH-ключ
          SSH_HOST: ${{ secrets.SSH_HOST }}                 # IP 
          SSH_USERNAME: 'bolsn'                             # Подключаемся как bolsn
          SSH_PORT: ${{ secrets.SSH_PORT }}                 # Порт SSH (обычно 22)
          # команда ssh-keyscan добавляет хост VPS в список известных хостов, чтобы избежать ошибки StrictHostKeyChecking...
          # Копируем файлы на VPS с помощью rsync: -avz --delete -e: -a: Архивный режим (сохраняет права доступа, временные метки и т.д.) / -v: Вывод подробной информации о процессе / -z: Сжатие данных при передаче / --delete: Удаляет файлы на VPS, которые отсутствуют в источнике 
          # Здесь ./ указывает на текущую директорию (всё, что находится на runner), а целевая директория — /var/www/fastuser/data/www/zonefloorball.ru/.
          # команда php artisan migrate --force применяет миграции без подтверждения... может быть это опасным? Надо подумать, что это именно то, что нам нужно...
          # после деплоя очищаем кэш Laravel-я, чтобы изменения вступили в силу. Добавляем в скрипт команду: php artisan optimize:clear
        run: |
          run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H $SSH_HOST >> ~/.ssh/known_hosts

          # Создаём временную директорию на VPS
          TEMP_DIR=$(ssh -p $SSH_PORT $SSH_USERNAME@$SSH_HOST "mktemp -d")

          # Копируем файлы с runner во временную директорию на VPS
          rsync -avz -e "ssh -p $SSH_PORT" \
            --exclude='.git' \
            --exclude='.gitignore' \
            --exclude='.gitattributes' \
            --exclude='node_modules' \
            --exclude='.env' \
            --exclude='vite.config.js' \
            ./ $SSH_USERNAME@$SSH_HOST:$TEMP_DIR/

          # Копируем файлы из временной директории в целевую от имени fastuser
          ssh -p $SSH_PORT $SSH_USERNAME@$SSH_HOST "
            sudo -u fastuser rsync -avz --delete \
              --exclude='.git' \
              --exclude='.gitignore' \
              --exclude='.gitattributes' \
              --exclude='node_modules' \
              --exclude='.env' \
              --exclude='vite.config.js' \
              $TEMP_DIR/ /var/www/fastuser/data/www/zonefloorball.ru/

            # Удаляем временную директорию
            rm -rf $TEMP_DIR

            # Выполняем сборку и настройку на VPS
            cd /var/www/fastuser/data/www/zonefloorball.ru &&
            sudo -u fastuser npm install &&
            sudo -u fastuser npm run build &&
            sudo -u fastuser composer install --optimize-autoloader --no-dev &&
            sudo -u fastuser php artisan migrate --force &&
            sudo -u fastuser php artisan optimize:clear
          "