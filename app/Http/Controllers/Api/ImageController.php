<?php
namespace App\Http\Controllers\Api;

use App\Http\Controllers\Controller;
use App\Models\Image;
use App\Models\Product;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Storage;
use Illuminate\Support\Str;
use Illuminate\Support\Facades\Validator;
use App\Http\Requests\StoreImageRequest;
use Illuminate\Support\Facades\Log;
use App\Models\ProductStatus;

class ImageController extends Controller
{
    // public function storeImages(Request $request, $productId) {
        // Laravel –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞–∑—Ä–µ—à–∏—Ç —ç—Ç–æ—Ç –ø–æ—Ä—è–¥–æ–∫
        // $productId –±—É–¥–µ—Ç –≤–∑—è—Ç –∏–∑ –º–∞—Ä—à—Ä—É—Ç–∞
        // public function storeStep3($productId, Request $request) - —Ç–∞–∫–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –º–µ–Ω–µ–µ –ø—Ä–∏–≤—ã—á–Ω–æ

    // –ó–∞–º–µ–Ω—è–µ–º Request –Ω–∞ StoreImageRequest
    public function storeImages(StoreImageRequest $request, $productId)  {
        // Laravel –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç –≤–∞–ª–∏–¥–∞—Ü–∏—é –î–û –≤—Ö–æ–¥–∞ –≤ –º–µ—Ç–æ–¥!
        // –ï—Å–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞ - –≤–µ—Ä–Ω–µ—Ç—Å—è 422 –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏

        \Log::debug('ImageController input', $request->all());

        Log::debug('üöÄ ImageController: –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞', [
            'productId'     => $productId,
            'hasFiles'      => $request->hasFile('images'),
            'filesCount'    => $request->hasFile('images') ? count($request->file('images')) : 0,
            'metadata'      => $request->metadata
        ]);
        
        try {
            DB::beginTransaction();
            Log::debug('‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–∞—á–∞—Ç–∞');

            // –í–∞–ª–∏–¥–∞—Ü–∏—è –£–ñ–ï –ø—Ä–æ–π–¥–µ–Ω–∞, –º–æ–∂–Ω–æ —Å—Ä–∞–∑—É —Ä–∞–±–æ—Ç–∞—Ç—å —Å –¥–∞–Ω–Ω—ã–º–∏ (StoreImageRequest)

            // –ü–∞—Ä—Å–∏–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            Log::debug('üîÑ –ü–∞—Ä—Å–∏–Ω–≥ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö...');
            $metadata = json_decode($request->metadata, true);
            Log::debug('üìã –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Ä–∞—Å–ø–∞—Ä—à–µ–Ω—ã:', $metadata);

            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
            if (!isset($metadata['mainIndex'])) {
                Log::warning('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç mainIndex –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö', $metadata);
                return response()->json([
                    'success' => false,
                    'message' => '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ'
                ], 422);
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
            Log::debug("üîÑ –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞ ID: {$productId}");
            $product = Product::findOrFail($productId);
            Log::debug("‚úÖ –¢–æ–≤–∞—Ä –Ω–∞–π–¥–µ–Ω: {$product->title} (ID: {$product->id}, Status: {$product->product_status_id})");

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤...
                // –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–æ–≤—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
                $uploadedImages = [];
                $hasMainImage = false;
                $files = $request->file('images', []);
                Log::debug("üìÅ –ü–æ–ª—É—á–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: " . count($files));

                foreach ($files as $index => $file) {
                    Log::debug("üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞ {$index}: {$file->getClientOriginalName()}");
                    $imagePath = $this->storeImage($file, $product, $index, $metadata);
                    Log::debug("üì∏ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –ø–æ –ø—É—Ç–∏: {$imagePath}");

                    $isMain = $metadata['mainIndex'] == $index;
                    if ($isMain) {
                        $hasMainImage = true;
                        Log::debug("üìå –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –≥–ª–∞–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Ñ–∞–π–ª–∞ {$index}");
                    }
                    
                    /*$image = Image::create([
                        'product_id'    => $product->id,
                        'img_link'      => $imagePath,
                        'img_main'      => $metadata['mainIndex'] == $index,
                        'img_showcase'  => isset($metadata['showcaseIndex']) && $metadata['showcaseIndex'] == $index,
                        'img_promo'     => isset($metadata['promoIndices']) && in_array($index, $metadata['promoIndices']),
                        'img_orient_id' => $metadata['orientations'][$index] ?? null,
                        'author_id'     => auth()->id(),
                        'created_at'    => now()
                    ]);*/

                    $imageData = [
                        'product_id' => $product->id,
                        'img_link' => $imagePath,
                        'img_main' => $metadata['mainIndex'] == $index,
                        'img_showcase' => isset($metadata['showcaseIndex']) && $metadata['showcaseIndex'] == $index,
                        'img_promo' => isset($metadata['promoIndices']) && in_array($index, $metadata['promoIndices']),
                        'img_orient_id' => $metadata['orientations'][$index] ?? null,
                        'author_id' => auth()->id(),
                        'created_at' => now()
                    ];
                    
                    Log::debug("üíæ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ Image:", $imageData);
                    
                    $image = Image::create($imageData);
                    $uploadedImages[] = $image;

                    Log::debug("‚úÖ –§–∞–π–ª {$index} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω");
                }
            
            // üî• –õ–û–ì–ò–ö–ê –°–ú–ï–ù–´ –°–¢–ê–¢–£–°–ê
            if ($product->isDraft() && $hasMainImage) {
                Log::debug("üîÑ –ü–æ–ø—ã—Ç–∫–∞ —Å–º–µ–Ω—ã —Å—Ç–∞—Ç—É—Å–∞ —Å DRAFT –Ω–∞ ACTIVE");
                
                if ($product->changeStatus(ProductStatus::ACTIVE)) {
                    Log::info("üéâ –°—Ç–∞—Ç—É—Å —Ç–æ–≤–∞—Ä–∞ ID: {$productId} –∏–∑–º–µ–Ω–µ–Ω —Å DRAFT –Ω–∞ ACTIVE");
                } else {
                    Log::warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Ç–æ–≤–∞—Ä–∞ ID: {$productId}");
                }
            } else {
                Log::debug("üìã –°–º–µ–Ω–∞ —Å—Ç–∞—Ç—É—Å–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è", [
                    'isDraft' => $product->isDraft(),
                    'hasMainImage' => $hasMainImage
                ]);
            }
            
            DB::commit();
            Log::debug('‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');

            $countUploadedImages = count($uploadedImages);
            Log::info("üéâ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {$countUploadedImages} –¥–ª—è —Ç–æ–≤–∞—Ä–∞ ID: {$productId}");

            // –ï—Å–ª–∏ —Å—Ä–µ–¥–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è —Ç–æ–≤–∞—Ä–∞ —Å product_status_id = 3 (draft) –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Å—É—Ñ—Ñ–∏–∫—Å–æ–º main -> –º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ product_status_id = 1 (active)

            return response()->json([
                'success' => true,
                'message' => "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ $countUploadedImages —à—Ç. —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã",
                'productId' => $product->id,
                'images' => $uploadedImages
            ]);

        }  catch (\Illuminate\Validation\ValidationException $e) {
            DB::rollBack();
            Log::warning('‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏', ['errors' => $e->errors()]);
            return response()->json([
                'success' => false,
                'message' => '–û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏',
                'errors' => $e->errors()
            ], 422);
        
        } catch (\Illuminate\Database\Eloquent\ModelNotFoundException $e) {
            DB::rollBack();
            Log::error('‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω', ['productId' => $productId]);
            return response()->json([
                'success' => false,
                'message' => '–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω'
            ], 404);

        } catch (\Exception $e) {
            DB::rollBack();
            \Log::error('Image upload error: ' . $e->getMessage());
            Log::error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ ImageController', [
                'message' => $e->getMessage(),
                'file' => $e->getFile(),
                'line' => $e->getLine(),
                'trace' => $e->getTraceAsString()
            ]);
            return response()->json([
                'success' => false,
                'message' => '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ' . $e->getMessage()
            ], 500);
        } finally {
            Log::debug('üèÅ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã ImageController');
        }
    }

    private function storeImage($file, Product $product, $index, $metadata) {
        Log::debug("üîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–º–µ–Ω–∏ –¥–ª—è —Ñ–∞–π–ª–∞ {$index}");

        $extension = $file->getClientOriginalExtension();
        Log::debug("üîÑ –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ {$extension}");
        
        /* —É –Ω–∞—Å –µ—Å—Ç—å –≤ –º–æ–¥–µ–ª–∏ Product –º–µ—Ç–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–∑–æ–≤–æ–≥–æ –∏–º–µ–Ω–∏–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤:
            public function getImgSrcAttribute() {      // –∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç: –æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å –ø–æ–ª—É—á–µ–Ω–∏–µ–º –∑–Ω–∞—á–µ–Ω–∏—è:
                $image = $this->hasOne(Image::class)->orderBy('created_at')->first();
                return $image ? $image->img_link : null;
                // –∏–º–µ–Ω–Ω–æ –ø–µ—Ä–≤–∞—è —Å—Å—ã–ª–∫–∞ - —ç—Ç–æ –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è, –ø—Ä–æ—Å—Ç–æ –±–∞–∑–æ–≤–æ–µ –∏–º—è –≤–∏–¥–∞: images/sticks/21461-klyushka-dlya-florbola-unihoc-cavity-z-32mm
        }*/
        // –ü–æ–ª—É—á–∞–µ–º –∏–∑ —Ç–∞–±–ª–∏—Ü—ã Images –±–∞–∑–æ–≤–æ–µ –∏–º—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–¥—É–∫—Ç–∞, –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —à–∞–≥–µ 2...
        $baseName = $product->img_src;      // –∫–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω–æ –≤ –º–æ–¥–µ–ª–∏ Product->getImgSrcAttribute()
        Log::debug("üè∑Ô∏è url {$baseName} - —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π –±–∞–∑–æ–≤—ã–π –∞–¥—Ä–µ—Å");              

        // –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å: images/sticks/images/sticks/21461-klyushka-dlya-florbola-unihoc-cavity-z-32mm-main.jpg
        // –∏–ª–∏ images/sticks/images/sticks/21461-klyushka-dlya-florbola-unihoc-cavity-z-32mm-showcase.jpg
        // –∏–ª–∏ images/sticks/images/sticks/21461-klyushka-dlya-florbola-unihoc-cavity-z-32mm-promo-1.jpg
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Å—É—Ñ—Ñ–∏–∫—Å–∞
        $suffix = '';
        if ($metadata['mainIndex'] == $index) {
            $suffix = '-main';
            Log::debug("üè∑Ô∏è –§–∞–π–ª {$index} - –æ—Å–Ω–æ–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ");
        } elseif (isset($metadata['showcaseIndex']) && $metadata['showcaseIndex'] == $index) {
            $suffix = '-showcase';
            Log::debug("üè∑Ô∏è –§–∞–π–ª {$index} - –¥–ª—è –≤–∏—Ç—Ä–∏–Ω—ã");
        } elseif (isset($metadata['promoIndices']) && in_array($index, $metadata['promoIndices'])) {
            $suffix = '-promo';
            Log::debug("üè∑Ô∏è –§–∞–π–ª {$index} - –ø—Ä–æ–º–æ-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ");
        }

        $i = 1;
        do {
            $fileName = $baseName . $suffix . ($i > 1 ? '-' . $i : '') . '.' . $extension;
            $i++;
        } while (Storage::exists('public/' . $fileName));
        Log::debug("üìù –ò–º—è —Ñ–∞–π–ª–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {$fileName}");
        
        $path = $file->storeAs('public', $fileName);
        Log::debug("üìÅ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {$path}");
        
        return $fileName;
    }
}